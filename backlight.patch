diff --git a/frameworks/base/Android.mk b/frameworks/base/Android.mk
index c6eaa5c..7c3febd 100755
--- a/frameworks/base/Android.mk
+++ b/frameworks/base/Android.mk
@@ -279,6 +279,7 @@ LOCAL_SRC_FILES += \
 	core/java/android/os/IGpioService.aidl \
 	core/java/android/os/IMcuService.aidl \
 	core/java/android/os/IModemService.aidl \
+	core/java/android/os/ILightsService.aidl \
 	core/java/android/os/storage/IStorageManager.aidl \
 	core/java/android/os/storage/IStorageEventListener.aidl \
 	core/java/android/os/storage/IStorageShutdownObserver.aidl \
diff --git a/frameworks/base/core/java/android/app/SystemServiceRegistry.java b/frameworks/base/core/java/android/app/SystemServiceRegistry.java
index 5359b9b..386d0d0 100755
--- a/frameworks/base/core/java/android/app/SystemServiceRegistry.java
+++ b/frameworks/base/core/java/android/app/SystemServiceRegistry.java
@@ -122,6 +122,7 @@ import android.os.Vibrator;
 import android.os.SystemGpio;
 import android.os.SystemMcu;
 import android.os.SystemModem;
+import android.os.SystemLights;
 import android.os.health.SystemHealthManager;
 import android.os.storage.StorageManager;
 import android.print.IPrintManager;
@@ -560,6 +561,13 @@ final class SystemServiceRegistry {
             public SystemModem createService(ContextImpl ctx) {
                 return new SystemModem(ctx);
             }});
+            
+        registerService(Context.LIGHTS_SERVICE, SystemLights.class,
+                new CachedServiceFetcher<SystemLights>() {
+            @Override
+            public SystemLights createService(ContextImpl ctx) {
+                return new SystemLights(ctx);
+            }});
 
         registerService(Context.WALLPAPER_SERVICE, WallpaperManager.class,
                 new CachedServiceFetcher<WallpaperManager>() {
diff --git a/frameworks/base/core/java/android/content/Context.java b/frameworks/base/core/java/android/content/Context.java
index a72cf37..dd4c380 100755
--- a/frameworks/base/core/java/android/content/Context.java
+++ b/frameworks/base/core/java/android/content/Context.java
@@ -3356,6 +3356,7 @@ public abstract class Context {
     public static final String GPIO_SERVICE = "gpio";
     public static final String MCU_SERVICE = "mcu";
     public static final String MODEM_SERVICE = "modem";
+    public static final String LIGHTS_SERVICE = "lights";
 
     /**
      * Use with {@link #getSystemService} to retrieve a {@link
diff --git a/frameworks/base/core/java/android/os/ILightsService.aidl b/frameworks/base/core/java/android/os/ILightsService.aidl
new file mode 100755
index 0000000..59248e8
--- /dev/null
+++ b/frameworks/base/core/java/android/os/ILightsService.aidl
@@ -0,0 +1,7 @@
+package android.os;
+ 
+/** {@hide} */
+interface ILightsService
+{
+	boolean setBrightness(int type, int brightness);
+}
diff --git a/frameworks/base/core/java/android/os/SystemLights.java b/frameworks/base/core/java/android/os/SystemLights.java
new file mode 100755
index 0000000..3001562
--- /dev/null
+++ b/frameworks/base/core/java/android/os/SystemLights.java
@@ -0,0 +1,38 @@
+
+package android.os;
+
+import android.content.Context;
+import android.media.AudioAttributes;
+import android.util.Log;
+
+/**
+    Lights
+
+    @hide
+*/
+public class SystemLights
+{
+    private static final String TAG = "lights";
+
+    private final ILightsService mService;
+    public SystemLights()
+    {
+        mService = ILightsService.Stub.asInterface(
+                       ServiceManager.getService("lights"));
+    }
+
+    public SystemLights(Context context)
+    {
+        mService = ILightsService.Stub.asInterface(
+                       ServiceManager.getService("lights"));
+    }
+
+    public boolean setBrightness(int type, int brightness)
+    {
+        try {
+            return mService.setBrightness(type, brightness);
+        } catch(Exception e) {}
+        
+        return false;
+    }
+}
diff --git a/frameworks/base/core/java/android/provider/Settings.java b/frameworks/base/core/java/android/provider/Settings.java
index d5a9d09..200734d 100755
--- a/frameworks/base/core/java/android/provider/Settings.java
+++ b/frameworks/base/core/java/android/provider/Settings.java
@@ -3087,6 +3087,14 @@ public final class Settings {
 
         private static final Validator SCREEN_BRIGHTNESS_VALIDATOR =
                 new InclusiveIntegerRangeValidator(0, 255);
+                
+        /**
+         * The extern screen backlight brightness between 0 and 255.
+         */
+        public static final String SCREEN_BRIGHTNESS_EXT = "screen_brightness_ext";
+
+        private static final Validator SCREEN_BRIGHTNESS_VALIDATOR_EXT =
+                new InclusiveIntegerRangeValidator(0, 255);
 
         /**
          * The screen backlight brightness between 0 and 255.
diff --git a/frameworks/base/packages/SystemUI/AndroidManifest.xml b/frameworks/base/packages/SystemUI/AndroidManifest.xml
old mode 100644
new mode 100755
index 070634b..95056f3
--- a/frameworks/base/packages/SystemUI/AndroidManifest.xml
+++ b/frameworks/base/packages/SystemUI/AndroidManifest.xml
@@ -528,6 +528,20 @@
                 <category android:name="android.intent.category.DEFAULT" />
             </intent-filter>
         </activity>
+		
+		<activity
+            android:name=".settings.BrightnessExtDialog"
+            android:label="@string/quick_settings_brightness_dialog_title"
+            android:theme="@*android:style/Theme.DeviceDefault.QuickSettings.Dialog"
+            android:finishOnCloseSystemDialogs="true"
+            android:launchMode="singleInstance"
+            android:excludeFromRecents="true"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="com.android.intent.action.SHOW_BRIGHTNESS_EXT_DIALOG" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>
 
         <activity android:name=".ForegroundServicesDialog"
             android:process=":fgservices"
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessController.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessController.java
old mode 100644
new mode 100755
index d3f997a..7209701
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessController.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessController.java
@@ -23,6 +23,7 @@ import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.IPowerManager;
+import android.os.ILightsService;
 import android.os.Looper;
 import android.os.Message;
 import android.os.PowerManager;
@@ -44,6 +45,11 @@ import java.util.ArrayList;
 public class BrightnessController implements ToggleSlider.Listener {
     private static final String TAG = "StatusBar.BrightnessController";
     private static final boolean SHOW_AUTOMATIC_ICON = false;
+    
+    public static final int SCREEN_TYPE_MAIN = 1;
+    public static final int SCREEN_TYPE_EXTEND = 2;
+    
+    private static final int EXTEND_SCREEN_BACKLIGHT_ID = 1;
 
     /**
      * {@link android.provider.Settings.System#SCREEN_AUTO_BRIGHTNESS_ADJ} uses the range [-1, 1].
@@ -70,6 +76,8 @@ public class BrightnessController implements ToggleSlider.Listener {
     private final IPowerManager mPower;
     private final CurrentUserTracker mUserTracker;
     private final IVrManager mVrManager;
+    private final ILightsService mLightsService;
+    private final int mScreenType;
 
     private final Handler mBackgroundHandler;
     private final BrightnessObserver mBrightnessObserver;
@@ -91,15 +99,18 @@ public class BrightnessController implements ToggleSlider.Listener {
 
         private final Uri BRIGHTNESS_MODE_URI =
                 Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE);
-        private final Uri BRIGHTNESS_URI =
+        private Uri BRIGHTNESS_URI =
                 Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS);
         private final Uri BRIGHTNESS_FOR_VR_URI =
                 Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_FOR_VR);
         private final Uri BRIGHTNESS_ADJ_URI =
                 Settings.System.getUriFor(Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ);
 
-        public BrightnessObserver(Handler handler) {
+        public BrightnessObserver(Handler handler, int type) {
             super(handler);
+            if (SCREEN_TYPE_EXTEND == type) {
+                BRIGHTNESS_URI = Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_EXT);
+            }
         }
 
         @Override
@@ -207,7 +218,14 @@ public class BrightnessController implements ToggleSlider.Listener {
     private final Runnable mUpdateSliderRunnable = new Runnable() {
         @Override
         public void run() {
-            if (mIsVrModeEnabled) {
+            if (SCREEN_TYPE_EXTEND == mScreenType) {
+                int value;
+                value = Settings.System.getIntForUser(mContext.getContentResolver(),
+                        Settings.System.SCREEN_BRIGHTNESS_EXT, mMaximumBacklight,
+                        UserHandle.USER_CURRENT);
+                mHandler.obtainMessage(MSG_UPDATE_SLIDER, mMaximumBacklight - mMinimumBacklight,
+                        value - mMinimumBacklight).sendToTarget();
+            } else if (mIsVrModeEnabled) {
                 int value = Settings.System.getIntForUser(mContext.getContentResolver(),
                         Settings.System.SCREEN_BRIGHTNESS_FOR_VR, mMaximumBacklight,
                         UserHandle.USER_CURRENT);
@@ -272,11 +290,16 @@ public class BrightnessController implements ToggleSlider.Listener {
             }
         }
     };
-
+    
     public BrightnessController(Context context, ImageView icon, ToggleSlider control) {
+        this(context, icon, control, SCREEN_TYPE_MAIN);
+    }
+
+    public BrightnessController(Context context, ImageView icon, ToggleSlider control, int type) {
         mContext = context;
         mIcon = icon;
         mControl = control;
+        mScreenType = type;
         mBackgroundHandler = new Handler((Looper) Dependency.get(Dependency.BG_LOOPER));
         mUserTracker = new CurrentUserTracker(mContext) {
             @Override
@@ -285,7 +308,7 @@ public class BrightnessController implements ToggleSlider.Listener {
                 mBackgroundHandler.post(mUpdateSliderRunnable);
             }
         };
-        mBrightnessObserver = new BrightnessObserver(mHandler);
+        mBrightnessObserver = new BrightnessObserver(mHandler, type);
 
         PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
         mMinimumBacklight = pm.getMinimumScreenBrightnessSetting();
@@ -299,6 +322,8 @@ public class BrightnessController implements ToggleSlider.Listener {
                 Context.POWER_SERVICE));
         mVrManager = IVrManager.Stub.asInterface(ServiceManager.getService(
                 Context.VR_SERVICE));
+        mLightsService = ILightsService.Stub.asInterface(ServiceManager.getService(
+                Context.LIGHTS_SERVICE));
     }
 
     public void addStateChangedCallback(BrightnessStateChangeCallback cb) {
@@ -356,7 +381,22 @@ public class BrightnessController implements ToggleSlider.Listener {
         updateIcon(mAutomatic);
         if (mExternalChange) return;
 
-        if (mIsVrModeEnabled) {
+        if (SCREEN_TYPE_EXTEND == mScreenType) {
+            final int val = value + mMinimumBacklight;
+            if (stopTracking) {
+                MetricsLogger.action(mContext, MetricsEvent.ACTION_BRIGHTNESS, val);
+            }
+            setBrightness(val);
+            if (!tracking) {
+                AsyncTask.execute(new Runnable() {
+                        public void run() {
+                            Settings.System.putIntForUser(mContext.getContentResolver(),
+                                    Settings.System.SCREEN_BRIGHTNESS_EXT, val,
+                                    UserHandle.USER_CURRENT);
+                        }
+                    });
+            }
+        } else if (mIsVrModeEnabled) {
             final int val = value + mMinimumBacklightForVr;
             if (stopTracking) {
                 MetricsLogger.action(mContext, MetricsEvent.ACTION_BRIGHTNESS_FOR_VR, val);
@@ -416,7 +456,11 @@ public class BrightnessController implements ToggleSlider.Listener {
 
     private void setBrightness(int brightness) {
         try {
-            mPower.setTemporaryScreenBrightnessSettingOverride(brightness);
+            if (SCREEN_TYPE_EXTEND == mScreenType) {
+                mLightsService.setBrightness(EXTEND_SCREEN_BACKLIGHT_ID, brightness);
+            } else {
+                mPower.setTemporaryScreenBrightnessSettingOverride(brightness);
+            }
         } catch (RemoteException ex) {
         }
     }
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessDialog.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessDialog.java
old mode 100644
new mode 100755
index 6918a63..790a30f
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessDialog.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessDialog.java
@@ -56,7 +56,7 @@ public class BrightnessDialog extends Activity {
 
         final ImageView icon = findViewById(R.id.brightness_icon);
         final ToggleSliderView slider = findViewById(R.id.brightness_slider);
-        mBrightnessController = new BrightnessController(this, icon, slider);
+        mBrightnessController = new BrightnessController(this, icon, slider, BrightnessController.SCREEN_TYPE_MAIN);
     }
 
     @Override
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessExtDialog.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessExtDialog.java
new file mode 100755
index 0000000..dcb97b6
--- /dev/null
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/settings/BrightnessExtDialog.java
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.settings;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.ContextThemeWrapper;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.ImageView;
+
+import com.android.internal.logging.MetricsLogger;
+import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
+import com.android.systemui.R;
+
+/** A dialog that provides controls for adjusting the screen brightness. */
+public class BrightnessExtDialog extends Activity {
+
+    private BrightnessController mBrightnessController;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        final Window window = getWindow();
+
+        window.setGravity(Gravity.TOP);
+        window.clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
+        window.requestFeature(Window.FEATURE_NO_TITLE);
+
+        // Use a dialog theme as the activity theme, but inflate the content as
+        // the QS content.
+        ContextThemeWrapper themedContext = new ContextThemeWrapper(this,
+                com.android.internal.R.style.Theme_DeviceDefault_QuickSettings);
+        View v = LayoutInflater.from(themedContext).inflate(
+                R.layout.quick_settings_brightness_dialog, null);
+        setContentView(v);
+
+        final ImageView icon = findViewById(R.id.brightness_icon);
+        final ToggleSliderView slider = findViewById(R.id.brightness_slider);
+        mBrightnessController = new BrightnessController(this, icon, slider, BrightnessController.SCREEN_TYPE_EXTEND);
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        mBrightnessController.registerCallbacks();
+        MetricsLogger.visible(this, MetricsEvent.BRIGHTNESS_DIALOG);
+    }
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+        MetricsLogger.hidden(this, MetricsEvent.BRIGHTNESS_DIALOG);
+        mBrightnessController.unregisterCallbacks();
+    }
+
+    @Override
+    public boolean onKeyDown(int keyCode, KeyEvent event) {
+        if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN
+                || keyCode == KeyEvent.KEYCODE_VOLUME_UP
+                || keyCode == KeyEvent.KEYCODE_VOLUME_MUTE) {
+            finish();
+        }
+
+        return super.onKeyDown(keyCode, event);
+    }
+}
diff --git a/frameworks/base/services/core/java/com/android/server/lights/LightsManager.java b/frameworks/base/services/core/java/com/android/server/lights/LightsManager.java
old mode 100644
new mode 100755
index be20a44..29fa4c2
--- a/frameworks/base/services/core/java/com/android/server/lights/LightsManager.java
+++ b/frameworks/base/services/core/java/com/android/server/lights/LightsManager.java
@@ -20,6 +20,7 @@ import android.hardware.light.V2_0.Type;
 
 public abstract class LightsManager {
     public static final int LIGHT_ID_BACKLIGHT = Type.BACKLIGHT;
+    public static final int LIGHT_ID_BACKLIGHT_EXT = Type.BACKLIGHT_EXT;
     public static final int LIGHT_ID_KEYBOARD = Type.KEYBOARD;
     public static final int LIGHT_ID_BUTTONS = Type.BUTTONS;
     public static final int LIGHT_ID_BATTERY = Type.BATTERY;
diff --git a/frameworks/base/services/core/java/com/android/server/lights/LightsServiceExt.java b/frameworks/base/services/core/java/com/android/server/lights/LightsServiceExt.java
new file mode 100755
index 0000000..98f2b22
--- /dev/null
+++ b/frameworks/base/services/core/java/com/android/server/lights/LightsServiceExt.java
@@ -0,0 +1,32 @@
+package com.android.server;
+
+import com.android.server.LocalServices;
+import com.android.server.lights.Light;
+import com.android.server.lights.LightsManager;
+
+import android.os.ILightsService;
+import android.util.Slog;
+
+public class LightsServiceExt extends ILightsService.Stub
+{
+    private static final String TAG = "LightsServiceExt";
+    
+    private LightsManager mLightsManager;
+
+    public boolean setBrightness(int type, int brightness)
+    {
+        Slog.d(TAG, "setBrightness, type=" + type + " brightness=" + brightness);
+        Light light = mLightsManager.getLight(type);
+        if (null != light) {
+            light.setBrightness(brightness);
+            return true;
+        }
+        
+        return false;
+    }
+    
+    public LightsServiceExt()
+    {
+        mLightsManager = LocalServices.getService(LightsManager.class);
+    }
+}
\ No newline at end of file
diff --git a/frameworks/base/services/java/com/android/server/SystemServer.java b/frameworks/base/services/java/com/android/server/SystemServer.java
index f177720..a7bc916 100755
--- a/frameworks/base/services/java/com/android/server/SystemServer.java
+++ b/frameworks/base/services/java/com/android/server/SystemServer.java
@@ -810,6 +810,11 @@ public final class SystemServer {
             ModemService modem = new ModemService();
             ServiceManager.addService("modem", modem);
             traceEnd();
+            
+            traceBeginAndSlog("StartLightsServiceExt");
+            LightsServiceExt lights = new LightsServiceExt();
+            ServiceManager.addService("lights", lights);
+            traceEnd();
 
             if (!disableConsumerIr) {
                 traceBeginAndSlog("StartConsumerIrService");
diff --git a/hardware/interfaces/current.txt b/hardware/interfaces/current.txt
old mode 100644
new mode 100755
index db34c37..beaf884
--- a/hardware/interfaces/current.txt
+++ b/hardware/interfaces/current.txt
@@ -112,7 +112,7 @@ a695898589e1ef15b2b2510f11edd6aafac9918d9cf8d74b4b6143b309dee542 android.hardwar
 cc7925a78c0ab022515f48840d3dae76f384ed3a1287abadcb461a5cd5396163 android.hardware.keymaster@3.0::IKeymasterDevice
 822998d7bb76f0cd719a409291434fcb56e6d50bc4780788bb157a3374d63b8c android.hardware.keymaster@3.0::types
 d4ed2f0e14f9e914d0b1275d2e0363192fe30aca9059c84edb5fad15995f9ec4 android.hardware.light@2.0::ILight
-d9584bfcaedd6e62cf337881748246b23e36cbc2bc3aa84c01b6a1e622061400 android.hardware.light@2.0::types
+be0b50c92e2b1bd887c2588f23c1bd609e6cc076fad2692b7a98f9346e46380c android.hardware.light@2.0::types
 16c0cf0f73de1e5208a95020c6c6474903e7094f76b2d782651afaca0e5fd86f android.hardware.media@1.0::types
 8bc2f5fdcad68856eb61a62fe4cc043fa064bb7f1dab95a71d1918ec1eef7b55 android.hardware.media.omx@1.0::IGraphicBufferSource
 0d3de9cd89d4718ea3b772f2d8b93be004feb3abb7e7dc5402e37047cc730d05 android.hardware.media.omx@1.0::IOmx
diff --git a/hardware/interfaces/light/2.0/default/Light.cpp b/hardware/interfaces/light/2.0/default/Light.cpp
old mode 100644
new mode 100755
index cde1536..c92d7f4
--- a/hardware/interfaces/light/2.0/default/Light.cpp
+++ b/hardware/interfaces/light/2.0/default/Light.cpp
@@ -98,6 +98,7 @@ Return<void> Light::getSupportedTypes(getSupportedTypes_cb _hidl_cb)  {
 
 const static std::map<Type, const char*> kLogicalLights = {
     {Type::BACKLIGHT,     LIGHT_ID_BACKLIGHT},
+    {Type::BACKLIGHT_EXT, LIGHT_ID_BACKLIGHT_EXT},
     {Type::KEYBOARD,      LIGHT_ID_KEYBOARD},
     {Type::BUTTONS,       LIGHT_ID_BUTTONS},
     {Type::BATTERY,       LIGHT_ID_BATTERY},
diff --git a/hardware/interfaces/light/2.0/types.hal b/hardware/interfaces/light/2.0/types.hal
old mode 100644
new mode 100755
index 27b67e0..4f02834
--- a/hardware/interfaces/light/2.0/types.hal
+++ b/hardware/interfaces/light/2.0/types.hal
@@ -85,6 +85,7 @@ enum Brightness : int32_t {
  */
 enum Type : int32_t {
     BACKLIGHT,
+	BACKLIGHT_EXT,
     KEYBOARD,
     BUTTONS,
     BATTERY,
diff --git a/hardware/libhardware/include/hardware/lights.h b/hardware/libhardware/include/hardware/lights.h
old mode 100644
new mode 100755
index b3d28b0..060b83e
--- a/hardware/libhardware/include/hardware/lights.h
+++ b/hardware/libhardware/include/hardware/lights.h
@@ -59,6 +59,7 @@ __BEGIN_DECLS
  * light to a reasonable color when the BUTTONS are lit.
  */
 #define LIGHT_ID_BACKLIGHT          "backlight"
+#define LIGHT_ID_BACKLIGHT_EXT      "backlight_ext"
 #define LIGHT_ID_KEYBOARD           "keyboard"
 #define LIGHT_ID_BUTTONS            "buttons"
 #define LIGHT_ID_BATTERY            "battery"
diff --git a/hardware/rockchip/liblights/lights.cpp b/hardware/rockchip/liblights/lights.cpp
old mode 100644
new mode 100755
index eebcd8f..ca10b51
--- a/hardware/rockchip/liblights/lights.cpp
+++ b/hardware/rockchip/liblights/lights.cpp
@@ -36,6 +36,7 @@
 /*****************************************************************************/
 #define BACKLIGHT_PATH  "/sys/class/backlight/rk28_bl/brightness"
 #define BACKLIGHT_PATH1 "/sys/class/backlight/backlight/brightness" // for kernel 4.4
+#define BACKLIGHT_EXT_PATH "/sys/class/backlight/backlight_extend/brightness" // for extend screen backlight
 #define BUTTON_LED_PATH "sys/class/leds/rk29_key_led/brightness"
 #define BATTERY_LED_PATH "sys/class/leds/battery_led/brightness"
 int g_bl_fd = 0;   //backlight fd
@@ -88,6 +89,8 @@ int set_backlight_light(struct light_device_t* dev, struct light_state_t const*
 {
     int err = 0;
     int brightness = rgb_to_brightness(state);
+
+    LOGI(">>> Enter set_backlight_light");
     pthread_mutex_lock(&g_lock);
     err = write_int(BACKLIGHT_PATH, brightness);
     if (err !=0)
@@ -96,6 +99,18 @@ int set_backlight_light(struct light_device_t* dev, struct light_state_t const*
     return 0;
 }
 
+int set_backlight_light_ext(struct light_device_t* dev, struct light_state_t const* state)
+{
+    int brightness = rgb_to_brightness(state);
+
+    LOGI(">>> Enter set_backlight_light_ext");
+    pthread_mutex_lock(&g_lock);
+    write_int(BACKLIGHT_EXT_PATH, brightness);
+    pthread_mutex_unlock(&g_lock);
+    return 0;
+}
+
+
 int set_keyboard_light(struct light_device_t* dev, struct light_state_t const* state)
 {
     LOGI(">>> Enter set_keyboard_light");
@@ -166,6 +181,8 @@ static int lights_device_open(const struct hw_module_t* module, char const* name
    
     if (!strcmp(name, LIGHT_ID_BACKLIGHT)) {
         dev->set_light = set_backlight_light;
+    }else if(!strcmp(name, LIGHT_ID_BACKLIGHT_EXT)) {
+        dev->set_light = set_backlight_light_ext;
     }else if(!strcmp(name, LIGHT_ID_KEYBOARD)) {
         dev->set_light = set_keyboard_light;
     }else if(!strcmp(name, LIGHT_ID_BUTTONS)) {
diff --git a/packages/apps/Settings/res/values-zh-rCN/strings.xml b/packages/apps/Settings/res/values-zh-rCN/strings.xml
index 6d4cfe5..c906fef 100755
--- a/packages/apps/Settings/res/values-zh-rCN/strings.xml
+++ b/packages/apps/Settings/res/values-zh-rCN/strings.xml
@@ -1012,7 +1012,9 @@
     <string name="accelerometer_summary_off" product="tablet" msgid="4781734213242521682">"旋转平板电脑时自动切换浏览模式"</string>
     <string name="accelerometer_summary_off" product="default" msgid="5485489363715740761">"旋转手机时自动改变显示方向"</string>
     <string name="brightness" msgid="8480105032417444275">"亮度"</string>
+    <string name="brightness_ext">"副屏亮度"</string>
     <string name="brightness_title" msgid="5746272622112982836">"亮度"</string>
+    <string name="brightness_ext_title">"副屏亮度"</string>
     <string name="brightness_summary" msgid="838917350127550703">"调整屏幕亮度"</string>
     <string name="auto_brightness_title" msgid="6341042882350279391">"自动调节亮度"</string>
     <string name="auto_brightness_summary" msgid="1799041158760605375">"根据环境光线情况优化亮度"</string>
diff --git a/packages/apps/Settings/res/values/strings.xml b/packages/apps/Settings/res/values/strings.xml
index d6ea8a3..8b7f3a0 100755
--- a/packages/apps/Settings/res/values/strings.xml
+++ b/packages/apps/Settings/res/values/strings.xml
@@ -2386,8 +2386,10 @@
     <string name="accelerometer_summary_off" product="default">Switch orientation automatically when rotating phone</string>
     <!-- Sound & display settings screen, setting option name to change brightness level -->
     <string name="brightness">Brightness level</string>
+    <string name="brightness_ext">Extern Brightness level</string>
     <!-- Sound & display settings screen, setting option name to change brightness level [CHAR LIMIT=30] -->
     <string name="brightness_title">Brightness</string>
+    <string name="brightness_ext_title">Extern Brightness</string>
     <!-- Sound & display settings screen, setting option summary to change brightness level -->
     <string name="brightness_summary">Adjust the brightness of the screen</string>
     <!-- Sound & display settings screen, setting option name to enable adaptive brightness [CHAR LIMIT=30] -->
diff --git a/packages/apps/Settings/res/xml/display_settings.xml b/packages/apps/Settings/res/xml/display_settings.xml
index 3abc1a7..5e16f6c 100755
--- a/packages/apps/Settings/res/xml/display_settings.xml
+++ b/packages/apps/Settings/res/xml/display_settings.xml
@@ -26,6 +26,13 @@
         settings:keywords="@string/keywords_display_brightness_level">
         <intent android:action="com.android.intent.action.SHOW_BRIGHTNESS_DIALOG" />
     </Preference>
+	
+	<Preference
+        android:key="brightness_ext"
+        android:title="@string/brightness_ext"
+        settings:keywords="@string/keywords_display_brightness_level">
+        <intent android:action="com.android.intent.action.SHOW_BRIGHTNESS_EXT_DIALOG" />
+    </Preference>
 
     <com.android.settings.display.NightDisplayPreference
         android:key="night_display"
diff --git a/packages/apps/Settings/src/com/android/settings/DisplaySettings.java b/packages/apps/Settings/src/com/android/settings/DisplaySettings.java
index b13fd0d..b0a71ff 100755
--- a/packages/apps/Settings/src/com/android/settings/DisplaySettings.java
+++ b/packages/apps/Settings/src/com/android/settings/DisplaySettings.java
@@ -26,6 +26,7 @@ import com.android.settings.display.AmbientDisplayPreferenceController;
 import com.android.settings.display.AutoBrightnessPreferenceController;
 import com.android.settings.display.AutoRotatePreferenceController;
 import com.android.settings.display.BrightnessLevelPreferenceController;
+import com.android.settings.display.BrightnessExtLevelPreferenceController;
 import com.android.settings.display.CameraGesturePreferenceController;
 import com.android.settings.display.ColorModePreferenceController;
 import com.android.settings.display.FontSizePreferenceController;
@@ -129,6 +130,7 @@ public class DisplaySettings extends DashboardFragment {
         controllers.add(new WallpaperPreferenceController(context));
         controllers.add(new ThemePreferenceController(context));
         controllers.add(new BrightnessLevelPreferenceController(context, lifecycle));
+        controllers.add(new BrightnessExtLevelPreferenceController(context, lifecycle));
         controllers.add(new ColorModePreferenceController(context));
         return controllers;
     }
diff --git a/packages/apps/Settings/src/com/android/settings/display/BrightnessExtLevelPreferenceController.java b/packages/apps/Settings/src/com/android/settings/display/BrightnessExtLevelPreferenceController.java
new file mode 100755
index 0000000..71644cd
--- /dev/null
+++ b/packages/apps/Settings/src/com/android/settings/display/BrightnessExtLevelPreferenceController.java
@@ -0,0 +1,136 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the
+ * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+package com.android.settings.display;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.PowerManager;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.provider.Settings;
+import android.provider.Settings.System;
+import android.service.vr.IVrManager;
+import android.support.annotation.VisibleForTesting;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceScreen;
+import android.util.Log;
+
+import com.android.settings.core.PreferenceControllerMixin;
+import com.android.settingslib.core.AbstractPreferenceController;
+import com.android.settingslib.core.lifecycle.Lifecycle;
+import com.android.settingslib.core.lifecycle.LifecycleObserver;
+import com.android.settingslib.core.lifecycle.events.OnStart;
+import com.android.settingslib.core.lifecycle.events.OnStop;
+
+import java.text.NumberFormat;
+
+public class BrightnessExtLevelPreferenceController extends AbstractPreferenceController implements
+        PreferenceControllerMixin, LifecycleObserver, OnStart, OnStop {
+
+    private static final String TAG = "BrightnessExtPrefCtrl";
+    private static final String KEY_BRIGHTNESS = "brightness_ext";
+    private static final Uri BRIGHTNESS_URI;
+
+    private final int mMinBrightness;
+    private final int mMaxBrightness;
+    private final ContentResolver mContentResolver;
+
+    private Preference mPreference;
+
+    static {
+        BRIGHTNESS_URI = System.getUriFor(System.SCREEN_BRIGHTNESS_EXT);
+    }
+
+    private ContentObserver mBrightnessObserver =
+        new ContentObserver(new Handler(Looper.getMainLooper())) {
+            @Override
+            public void onChange(boolean selfChange) {
+                updatedSummary(mPreference);
+            }
+        };
+
+    public BrightnessExtLevelPreferenceController(Context context, Lifecycle lifecycle) {
+        this(context, lifecycle, new PowerManagerWrapper(
+                (PowerManager) context.getSystemService(Context.POWER_SERVICE)));
+    }
+
+    @VisibleForTesting
+    public BrightnessExtLevelPreferenceController(Context context, Lifecycle lifecycle,
+            PowerManagerWrapper powerManagerWrapper) {
+        super(context);
+        if (lifecycle != null) {
+            lifecycle.addObserver(this);
+        }
+        mMinBrightness = powerManagerWrapper.getMinimumScreenBrightnessSetting();
+        mMaxBrightness = powerManagerWrapper.getMaximumScreenBrightnessSetting();
+        mContentResolver = mContext.getContentResolver();
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return true;
+    }
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY_BRIGHTNESS;
+    }
+
+    @Override
+    public void displayPreference(PreferenceScreen screen) {
+        super.displayPreference(screen);
+        mPreference = screen.findPreference(KEY_BRIGHTNESS);
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        updatedSummary(preference);
+    }
+
+    @Override
+    public void onStart() {
+        mContentResolver.registerContentObserver(BRIGHTNESS_URI, false, mBrightnessObserver);
+    }
+
+    @Override
+    public void onStop() {
+        mContentResolver.unregisterContentObserver(mBrightnessObserver);
+    }
+
+    private void updatedSummary(Preference preference) {
+        if (preference != null) {
+            preference.setSummary(NumberFormat.getPercentInstance().format(getCurrentBrightness()));
+        }
+    }
+
+    private double getCurrentBrightness() {
+        final double value = Settings.System.getInt(mContentResolver, System.SCREEN_BRIGHTNESS_EXT,
+                mMinBrightness);
+        return getPercentage(value, mMinBrightness, mMaxBrightness);
+    }
+
+    private double getPercentage(double value, int min, int max) {
+        if (value > max) {
+            return 1.0;
+        }
+        if (value < min) {
+            return 0.0;
+        }
+        return (value - min) / (max - min);
+    }
+}
